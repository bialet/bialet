// Generated automatically from src/bialet.wren. Do not edit.
static const char* bialetModuleSource =
"class Response {\n"
"  static init() {\n"
"    __headers = {\"Content-Type\": \"text/html\"}\n"
"    __status = 200\n"
"    __out = \"\"\n"
"  }\n"
"  static out(out) { __out = __out + \"\\r\\n\" + out }\n"
"  static out() { __out.trim() }\n"
"  static status(status) { __status = status }\n"
"  static status() { __status }\n"
"  static headers() { __headers.keys.map{|k| k + \": \" + __headers[k] + \"\\r\\n\"}.join() }\n"
"  static header(header, value) { __headers[header.trim()] = value.trim() }\n"
"  static redirect(url) {\n"
"    Response.status(302)\n"
"    Response.header(\"Location\", url)\n"
"  }\n"
"}\n"
"\n"
"Response.init()\n"
"\n"
"class Request {\n"
"  static init(message) {\n"
"    __message = message\n"
"    __headers = {}\n"
"    __get = {}\n"
"    __post = {}\n"
"    var lines = message.split(\"\\n\")\n"
"    var tmp = lines.removeAt(0).split(\" \")\n"
"    __method = tmp[0]\n"
"    __fullUri = tmp[1]\n"
"    __body = \"\"\n"
"    var uriSeparator = __fullUri.indexOf(\"?\")\n"
"    if (uriSeparator > 0) {\n"
"      __uri = __fullUri[0...uriSeparator]\n"
"      __get = parseQuery(__fullUri[uriSeparator+1...__fullUri.count])\n"
"    }\n"
"    var startBody = false\n"
"    for (line in lines) {\n"
"      if (line.trim() == \"\") {\n"
"        startBody = true\n"
"        continue\n"
"      }\n"
"      if (!startBody) {\n"
"        tmp = line.split(\":\")\n"
"        __headers[tmp.removeAt(0).trim()] = tmp.join(\":\").trim()\n"
"      } else {\n"
"        __body = __body + line\n"
"      }\n"
"    }\n"
"    if (__method == \"POST\") {\n"
"      __post = parseQuery(__body)\n"
"    }\n"
"  }\n"
"  static parseQuery(query) {\n"
"    var all = {}\n"
"    // TODO URL decode\n"
"    query.split(\"&\").each{|q| all[q.split(\"=\")[0]] = q.split(\"=\")[1]}\n"
"    return all\n"
"  }\n"
"  static header(name) { __headers[name] ? __headers[name]:\"\" }\n"
"  static get(name) { __get[name] ? __get[name]:\"\" }\n"
"  static post(name) { __post[name] ? __post[name]:\"\" }\n"
"  static method() { __method }\n"
"  static uri() { __uri }\n"
"  static body() { __body }\n"
"}\n"
"\n"
"class Cookie {\n"
"  static set(name, value, options) {\n"
"      // TODO Add multiple cookies!\n"
"    Request.header(\"Set-Cookie\", name + \"=\" + value + \"; \" + options.map{|k, v| k + \"=\" + v}.join(\"; \"))\n"
"  }\n"
"  static set(name, value){ set(name, value, {}) }\n"
"}\n"
"\n"
"// TODO: Sessions\n"
"class Session {\n"
"}\n"
"\n"
"class Db {\n"
"  foreign static intQuery(query, params)\n"
"  foreign static intLastInsertId()\n"
"  static query(query, params){\n"
"    System.write(\"Query: %(query) - Params: %(params)\")\n"
"    var res = Db.intQuery(query, params)\n"
"    System.write(\"Res: %(res)\")\n"
"    return res ? res : []\n"
"  }\n"
"  static lastInsertId(){ intLastInsertId() }\n"
"  static migrate(version, schema) {\n"
"    Db.query(\"CREATE TABLE IF NOT EXISTS BIALET_MIGRATIONS (version TEXT, createdAt DATETIME DEFAULT CURRENT_TIMESTAMP)\")\n"
"    if (!Db.one(\"SELECT version FROM BIALET_MIGRATIONS WHERE version = ?\", [version])) {\n"
"      if (Db.query(schema)) {\n"
"        Db.query(\"INSERT INTO BIALET_MIGRATIONS (version) VALUES (?)\", [version])\n"
"      }\n"
"    }\n"
"  }\n"
"  static query(query) { Db.query(query, []) }\n"
"  static all(query) { Db.query(query, []) }\n"
"  static all(query, params) { Db.query(query, params) }\n"
"  static one(query, params) {\n"
"    var res = Db.all(query + \" limit 1\", params)\n"
"    if (res && res.count > 0) {\n"
"      return res[0]\n"
"    }\n"
"    return null\n"
"  }\n"
"  static one(query) { Db.one(query, []) }\n"
"  static save(table, values) {\n"
"    Db.all(\"REPLACE INTO \" + table + \"(\" + values.keys.join(\", \") + \") VALUES (\" + values.map{|v| \"?\"}.join(\", \") + \")\", values.values.toList)\n"
"    return Db.lastInsertId()\n"
"  }\n"
"}\n";
